# Scaffolding generated by Casein v5.2.0.0

module Casein
  class SlotsController < Casein::CaseinController
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_action :needs_admin, except: [:action1, :action2]
    # before_action :needs_admin_or_current_user, only: [:action1, :action2]

    def index
      @casein_page_title = 'Slots'
      @slots = Slot.order(sort_order(:user_id)).paginate page: params[:page]
    end

    def show
      @casein_page_title = 'View slot'
      @slot = Slot.find params[:id]
    end

    def user_slots
      @user = User.find(params[:user_id])
      @slots = @user.slots.order(:start_time)
    end

    def event_slots
      @event = Event.find(params[:event_id])
      @slots = @event.slots.order(:start_time)
    end

    def new
      @casein_page_title = 'Add a new slot'
      @slot = Slot.new
    end

    def create
      @slot = Slot.new slot_params

      if @slot.save
        flash[:notice] = 'Slot created'
        redirect_to casein_slots_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new slot'
        render action: :new
      end
    end

    def update
      @casein_page_title = 'Update slot'

      @slot = Slot.find params[:id]

      if @slot.update_attributes slot_params
        flash[:notice] = 'Slot has been updated'
        redirect_to casein_slots_path
      else
        flash.now[:warning] = 'There were problems when trying to update this slot'
        render action: :show
      end
    end

    def destroy
      @slot = Slot.find params[:id]

      @slot.destroy
      flash[:notice] = 'Slot has been deleted'
      redirect_to casein_slots_path
    end

    private

    def slot_params
      params.require(:slot).permit(:user_id, :event_id, :start_time, :is_payed)
    end
  end
end
