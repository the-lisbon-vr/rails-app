# Scaffolding generated by Casein v5.2.0.0

module Casein
  class EventsController < Casein::CaseinController
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_action :needs_admin, except: [:action1, :action2]
    # before_action :needs_admin_or_current_user, only: [:action1, :action2]

    def index
      @casein_page_title = 'Events'
      @events = Event.order(sort_order(:date)).paginate page: params[:page]
    end

    def show
      @casein_page_title = 'View event'
      @event = Event.find params[:id]
    end

    def new
      @casein_page_title = 'Add a new event'
      @event = Event.new
    end

    def create
      @event = Event.new event_params

      # create empty slots to let the users book:
      create_slots(event_params)

      if @event.save
        flash[:notice] = 'Event created'
        redirect_to casein_events_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new event'
        render action: :new
      end
    end

    def update
      @casein_page_title = 'Update event'

      @event = Event.find params[:id]

      if @event.update_attributes event_params
        flash[:notice] = 'Event has been updated'
        redirect_to casein_events_path
      else
        flash.now[:warning] = 'There were problems when trying to update this event'
        render action: :show
      end
    end

    def destroy
      @event = Event.find params[:id]

      @event.destroy
      flash[:notice] = 'Event has been deleted'
      redirect_to casein_events_path
    end

    private

    def event_params
      params.require(:event).permit(:name, :date, :location, :description, :max_bookings, :price_per_slot, :start_time, :end_time, :slot_duration_minutes)
    end

    def create_slots(event_params)
      start_time = DateTime.new(event_params["start_time(1i)"].to_i,event_params["start_time(2i)"].to_i,event_params["start_time(3i)"].to_i,event_params["start_time(4i)"].to_i,event_params["start_time(5i)"].to_i,0)
      duration_minutes = event_params[:slot_duration_minutes]

      event_params[:max_bookings].to_i.times {
        @slot = Slot.new(start_time: start_time, duration_minutes: duration_minutes)

        @slot.event = @event
        @slot.save

        minutes_in_a_day = 24 * 60
        start_time += Rational(duration_minutes, minutes_in_a_day)
      }
    end

  end
end
