# Scaffolding generated by Casein v5.2.0.0

module Casein
  class EventsController < Casein::CaseinController
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_action :needs_admin, except: [:action1, :action2]
    # before_action :needs_admin_or_current_user, only: [:action1, :action2]
    before_action :find_event, only: [:show, :update, :destroy]

    def index
      @casein_page_title = 'Events'
      @events = Event.order(sort_order(:date)).paginate page: params[:page]
    end

    def show
      @casein_page_title = 'View event'
    end

    def new
      @casein_page_title = 'Add a new event'
      @event = Event.new
    end

    def create
      @event = Event.new event_params
      set_max_bookings
      @event.number_of_players = 2 if @event.number_of_players.nil?
      if @event.save
        # create empty slots to let the users book:
        create_slots
        flash[:notice] = 'Event created'
        redirect_to casein_events_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new event'
        render action: :new
      end
    end

    def update
      @casein_page_title = 'Update event'

      check_change_in_slot_duration(event_params)
      # check_if_photo_changed(event_params)
      if @event.update_attributes event_params
        flash[:notice] = 'Event has been updated'
        if @slot_duration_has_changed
          delete_the_old_slots # deletes the old slots, but keeps a record of ones that had been booked
          set_max_bookings
          @event.save
          create_slots
          flash[:notice] = 'Event has been updated, and new slots were created.'
          flash[:warning] = list_of_users_who_had_booked_slots if !@already_booked_slots.empty?
        end
        redirect_to casein_events_path
      else
        flash.now[:warning] = 'There were problems when trying to update this event'
        render action: :show
      end
    end

    def destroy
      @event.destroy
      flash[:notice] = 'Event has been deleted'
      redirect_to casein_events_path
    end

    def see_users
      @event = Event.find(params[:event_id])
      @users = []
      @event.users.each do |user|
        @users << user if !@users.include?(user)
      end
    end

    private

    def event_params
      params.require(:event).permit(:name, :date, :location, :description, :description_en, :price_per_slot, :start_time, :end_time, :slot_duration_minutes, :time_between_slots, :number_of_players, :photo)
    end

    def find_event
      @event = Event.find(params[:id])
    end

    def set_max_bookings
      total_session_time = @event.slot_duration_minutes + @event.time_between_slots
      @event.max_bookings = (((@event.end_time.to_i - @event.start_time.to_i) / 60) / total_session_time).floor
    end

    def create_slots
      @event.number_of_players.times do
        slot_start_time = @event.start_time
        # event_slot_duration will be added to slot_start_time to set each slot's start_time
        # -- it's "* 60" because times are updated in seconds
        event_slot_duration = (@event.slot_duration_minutes + @event.time_between_slots) * 60
        @event.max_bookings.times do
          Slot.create(event: @event, start_time: slot_start_time)
          slot_start_time += event_slot_duration
        end
      end
    end

    def check_change_in_slot_duration(event_params)
      new_event = Event.new(event_params)
      time_between_changed = @event.time_between_slots != new_event.time_between_slots
      duration_changed = @event.slot_duration_minutes != new_event.slot_duration_minutes
      @slot_duration_has_changed = (time_between_changed || duration_changed)
    end

    # def check_if_photo_changed(event_params)
    #   if !event_params["photo"].nil?
    #     # delete the previous photo
    #     event_id = @event.id
    #     previous_photo = Attachinary::File.where(attachinariable_id: event_id).last
    #     if !previous_photo.nil?
    #       previous_photo.destroy
    #     end
    #     byebug
    #   end
    # end


    def delete_the_old_slots
      @already_booked_slots = []
      Slot.where(event: @event).each do |slot|
        @already_booked_slots << slot if !slot.user_id.nil?
        slot.destroy
      end
    end

    def list_of_users_who_had_booked_slots
      str = "The following users had their bookings deleted: "
      @already_booked_slots.each do |slot|
        str += "// [User ID: #{slot.user_id}. Session start: #{slot.start_time.to_s(:time)}] "
      end
      str
    end
  end
end
